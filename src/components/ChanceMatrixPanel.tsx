import React, { useEffect, useRef, useState } from 'react';
import type { ReactElement } from 'react';

type ChanceHandler = {
  name: string;
  handler: () => ReactElement;
};

const handlers: Record<string, ChanceHandler> = {
  '1,1': {
    name: '+10',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        +10
      </div>
    ),
  },
  '1,2': {
    name: '-10',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        -10
      </div>
    ),
  },
  '1,3': {
    name: '5 ходов вперед',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        5 -&gt;
      </div>
    ),
  },
  '1,4': {
    name: '5 ходов назад',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        5 &lt;-
      </div>
    ),
  },
  '1,5': {
    name: 'отказ от вопроса',
    handler: () => (
      <svg
        width="90%"
        height="90%"
        viewBox="0 0 48 48"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        preserveAspectRatio="xMidYMid meet"
      >
        <path d="M24.0013 16.2308C22.4955 16.2308 21.2734 17.4369 21.2734 18.9231V19.1535C21.2734 19.582 21.101 19.9928 20.7941 20.2958C20.4871 20.5987 20.0708 20.7689 19.6367 20.7689C19.2026 20.7689 18.7863 20.5987 18.4794 20.2958C18.1724 19.9928 18 19.582 18 19.1535V18.9231C18 17.3522 18.6323 15.8456 19.7577 14.7348C20.8832 13.624 22.4097 13 24.0013 13H24.2545C25.4285 13.0005 26.5742 13.3559 27.5375 14.0182C28.5008 14.6805 29.2355 15.6181 29.6429 16.7048C30.0502 17.7915 30.1107 18.9753 29.8161 20.0969C29.5214 21.2185 28.8859 22.2242 27.9949 22.9788L26.3146 24.4003C26.1037 24.5809 25.9344 24.8038 25.8177 25.0542C25.701 25.3045 25.6398 25.5765 25.638 25.852V27C25.638 27.4284 25.4656 27.8393 25.1587 28.1422C24.8517 28.4452 24.4354 28.6154 24.0013 28.6154C23.5672 28.6154 23.1509 28.4452 22.844 28.1422C22.537 27.8393 22.3646 27.4284 22.3646 27V25.852C22.3646 24.3508 23.028 22.9249 24.1825 21.9492L25.865 20.5277C26.2489 20.2029 26.5228 19.7699 26.6499 19.2868C26.7769 18.8037 26.7509 18.2939 26.5755 17.8258C26.4001 17.3578 26.0836 16.954 25.6686 16.6688C25.2536 16.3836 24.7601 16.2308 24.2545 16.2308H24.0013ZM24.0013 34C24.5801 34 25.1352 33.7731 25.5444 33.3692C25.9537 32.9652 26.1836 32.4174 26.1836 31.8462C26.1836 31.2749 25.9537 30.7271 25.5444 30.3232C25.1352 29.9192 24.5801 29.6923 24.0013 29.6923C23.4225 29.6923 22.8675 29.9192 22.4582 30.3232C22.0489 30.7271 21.819 31.2749 21.819 31.8462C21.819 32.4174 22.0489 32.9652 22.4582 33.3692C22.8675 33.7731 23.4225 34 24.0013 34Z" fill="black"/>
        <path d="M6 24C6 19.2261 7.89642 14.6477 11.2721 11.2721C14.6477 7.89642 19.2261 6 24 6C28.7739 6 33.3523 7.89642 36.7279 11.2721C40.1036 14.6477 42 19.2261 42 24C42 28.7739 40.1036 33.3523 36.7279 36.7279C33.3523 40.1036 28.7739 42 24 42C19.2261 42 14.6477 40.1036 11.2721 36.7279C7.89642 33.3523 6 28.7739 6 24ZM24 9.08571C22.0414 9.08571 20.102 9.47148 18.2926 10.221C16.4831 10.9705 14.8389 12.0691 13.454 13.454C12.0691 14.8389 10.9705 16.4831 10.221 18.2926C9.47148 20.102 9.08571 22.0414 9.08571 24C9.08571 25.9586 9.47148 27.898 10.221 29.7075C10.9705 31.5169 12.0691 33.1611 13.454 34.546C14.8389 35.9309 16.4831 37.0295 18.2926 37.779C20.102 38.5285 22.0414 38.9143 24 38.9143C27.9555 38.9143 31.749 37.343 34.546 34.546C37.343 31.749 38.9143 27.9555 38.9143 24C38.9143 20.0445 37.343 16.251 34.546 13.454C31.749 10.657 27.9555 9.08571 24 9.08571Z" fill="black"/>
        <path d="M35.5 12.5L12 36" stroke="black" strokeWidth="2"/>
      </svg>
    ),
  },
  '1,6': {
    name: 'еще три вопроса',
    handler: () => (
      <svg
        width="90%"
        height="90%"
        viewBox="0 0 48 48"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        preserveAspectRatio="xMidYMid meet"
      >
        <path d="M24.0013 16.2308C22.4955 16.2308 21.2734 17.4369 21.2734 18.9231V19.1535C21.2734 19.582 21.101 19.9928 20.7941 20.2958C20.4871 20.5987 20.0708 20.7689 19.6367 20.7689C19.2026 20.7689 18.7863 20.5987 18.4794 20.2958C18.1724 19.9928 18 19.582 18 19.1535V18.9231C18 17.3522 18.6323 15.8456 19.7577 14.7348C20.8832 13.624 22.4097 13 24.0013 13H24.2545C25.4285 13.0005 26.5742 13.3559 27.5375 14.0182C28.5008 14.6805 29.2355 15.6181 29.6429 16.7048C30.0502 17.7915 30.1107 18.9753 29.8161 20.0969C29.5214 21.2185 28.8859 22.2242 27.9949 22.9788L26.3146 24.4003C26.1037 24.5809 25.9344 24.8038 25.8177 25.0542C25.701 25.3045 25.6398 25.5765 25.638 25.852V27C25.638 27.4284 25.4656 27.8393 25.1587 28.1422C24.8517 28.4452 24.4354 28.6154 24.0013 28.6154C23.5672 28.6154 23.1509 28.4452 22.844 28.1422C22.537 27.8393 22.3646 27.4284 22.3646 27V25.852C22.3646 24.3508 23.028 22.9249 24.1825 21.9492L25.865 20.5277C26.2489 20.2029 26.5228 19.7699 26.6499 19.2868C26.7769 18.8037 26.7509 18.2939 26.5755 17.8258C26.4001 17.3578 26.0836 16.954 25.6686 16.6688C25.2536 16.3836 24.7601 16.2308 24.2545 16.2308H24.0013ZM24.0013 34C24.5801 34 25.1352 33.7731 25.5444 33.3692C25.9537 32.9652 26.1836 32.4174 26.1836 31.8462C26.1836 31.2749 25.9537 30.7271 25.5444 30.3232C25.1352 29.9192 24.5801 29.6923 24.0013 29.6923C23.4225 29.6923 22.8675 29.9192 22.4582 30.3232C22.0489 30.7271 21.819 31.2749 21.819 31.8462C21.819 32.4174 22.0489 32.9652 22.4582 33.3692C22.8675 33.7731 23.4225 34 24.0013 34Z" fill="black"/>
        <path d="M37.0013 16.2308C35.4955 16.2308 34.2734 17.4369 34.2734 18.9231V19.1535C34.2734 19.582 34.101 19.9928 33.7941 20.2958C33.4871 20.5987 33.0708 20.7689 32.6367 20.7689C32.2026 20.7689 31.7863 20.5987 31.4794 20.2958C31.1724 19.9928 31 19.582 31 19.1535V18.9231C31 17.3522 31.6323 15.8456 32.7577 14.7348C33.8832 13.624 35.4097 13 37.0013 13H37.2545C38.4285 13.0005 39.5742 13.3559 40.5375 14.0182C41.5008 14.6805 42.2355 15.6181 42.6429 16.7048C43.0502 17.7915 43.1107 18.9753 42.8161 20.0969C42.5214 21.2185 41.8859 22.2242 40.9949 22.9788L39.3146 24.4003C39.1037 24.5809 38.9344 24.8038 38.8177 25.0542C38.701 25.3045 38.6398 25.5765 38.638 25.852V27C38.638 27.4284 38.4656 27.8393 38.1587 28.1422C37.8517 28.4452 37.4354 28.6154 37.0013 28.6154C36.5672 28.6154 36.1509 28.4452 35.844 28.1422C35.537 27.8393 35.3646 27.4284 35.3646 27V25.852C35.3646 24.3508 36.028 22.9249 37.1825 21.9492L38.865 20.5277C39.2489 20.2029 39.5228 19.7699 39.6499 19.2868C39.7769 18.8037 39.7509 18.2939 39.5755 17.8258C39.4001 17.3578 39.0836 16.954 38.6686 16.6688C38.2536 16.3836 37.7601 16.2308 37.2545 16.2308H37.0013ZM37.0013 34C37.5801 34 38.1352 33.7731 38.5444 33.3692C38.9537 32.9652 39.1836 32.4174 39.1836 31.8462C39.1836 31.2749 38.9537 30.7271 38.5444 30.3232C38.1352 29.9192 37.5801 29.6923 37.0013 29.6923C36.4225 29.6923 35.8675 29.9192 35.4582 30.3232C35.0489 30.7271 34.819 31.2749 34.819 31.8462C34.819 32.4174 35.0489 32.9652 35.4582 33.3692C35.8675 33.7731 36.4225 34 37.0013 34Z" fill="black"/>
        <path d="M11.0013 16.2308C9.49554 16.2308 8.27345 17.4369 8.27345 18.9231V19.1535C8.27345 19.582 8.10101 19.9928 7.79406 20.2958C7.48712 20.5987 7.07081 20.7689 6.63672 20.7689C6.20264 20.7689 5.78633 20.5987 5.47939 20.2958C5.17244 19.9928 5 19.582 5 19.1535V18.9231C5 17.3522 5.63228 15.8456 6.75775 14.7348C7.88321 13.624 9.40967 13 11.0013 13H11.2545C12.4285 13.0005 13.5742 13.3559 14.5375 14.0182C15.5008 14.6805 16.2355 15.6181 16.6429 16.7048C17.0502 17.7915 17.1107 18.9753 16.8161 20.0969C16.5214 21.2185 15.8859 22.2242 14.9949 22.9788L13.3146 24.4003C13.1037 24.5809 12.9344 24.8038 12.8177 25.0542C12.701 25.3045 12.6398 25.5765 12.638 25.852V27C12.638 27.4284 12.4656 27.8393 12.1587 28.1422C11.8517 28.4452 11.4354 28.6154 11.0013 28.6154C10.5672 28.6154 10.1509 28.4452 9.84398 28.1422C9.53704 27.8393 9.3646 27.4284 9.3646 27V25.852C9.3646 24.3508 10.028 22.9249 11.1825 21.9492L12.865 20.5277C13.2489 20.2029 13.5228 19.7699 13.6499 19.2868C13.7769 18.8037 13.7509 18.2939 13.5755 17.8258C13.4001 17.3578 13.0836 16.954 12.6686 16.6688C12.2536 16.3836 11.7601 16.2308 11.2545 16.2308H11.0013ZM11.0013 34C11.5801 34 12.1352 33.7731 12.5444 33.3692C12.9537 32.9652 13.1836 32.4174 13.1836 31.8462C13.1836 31.2749 12.9537 30.7271 12.5444 30.3232C12.1352 29.9192 11.5801 29.6923 11.0013 29.6923C10.4225 29.6923 9.86746 29.9192 9.4582 30.3232C9.04894 30.7271 8.81902 31.2749 8.81902 31.8462C8.81902 32.4174 9.04894 32.9652 9.4582 33.3692C9.86746 33.7731 10.4225 34 11.0013 34Z" fill="black"/>
      </svg>
    ),
  },
  '2,1': {
    name: '-15',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        -15
      </div>
    ),
  },
  '2,2': {
    name: '+15',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        +15
      </div>
    ),
  },
  '2,3': {
    name: 'пожертвуй фирму',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        Lose
      </div>
    ),
  },
  '2,4': {
    name: 'поменяй фирму',
    handler: () => (
      <div className="text-[1vw] leading-none text-center">
        Change
      </div>
    ),
  },
  '2,5': {
    name: 'еще вопрос',
    handler: () => (
      <svg
        width="90%"
        height="90%"
        viewBox="0 0 48 48"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        preserveAspectRatio="xMidYMid meet"
      >
        <path d="M24.0013 16.2308C22.4955 16.2308 21.2734 17.4369 21.2734 18.9231V19.1535C21.2734 19.582 21.101 19.9928 20.7941 20.2958C20.4871 20.5987 20.0708 20.7689 19.6367 20.7689C19.2026 20.7689 18.7863 20.5987 18.4794 20.2958C18.1724 19.9928 18 19.582 18 19.1535V18.9231C18 17.3522 18.6323 15.8456 19.7577 14.7348C20.8832 13.624 22.4097 13 24.0013 13H24.2545C25.4285 13.0005 26.5742 13.3559 27.5375 14.0182C28.5008 14.6805 29.2355 15.6181 29.6429 16.7048C30.0502 17.7915 30.1107 18.9753 29.8161 20.0969C29.5214 21.2185 28.8859 22.2242 27.9949 22.9788L26.3146 24.4003C26.1037 24.5809 25.9344 24.8038 25.8177 25.0542C25.701 25.3045 25.6398 25.5765 25.638 25.852V27C25.638 27.4284 25.4656 27.8393 25.1587 28.1422C24.8517 28.4452 24.4354 28.6154 24.0013 28.6154C23.5672 28.6154 23.1509 28.4452 22.844 28.1422C22.537 27.8393 22.3646 27.4284 22.3646 27V25.852C22.3646 24.3508 23.028 22.9249 24.1825 21.9492L25.865 20.5277C26.2489 20.2029 26.5228 19.7699 26.6499 19.2868C26.7769 18.8037 26.7509 18.2939 26.5755 17.8258C26.4001 17.3578 26.0836 16.954 25.6686 16.6688C25.2536 16.3836 24.7601 16.2308 24.2545 16.2308H24.0013ZM24.0013 34C24.5801 34 25.1352 33.7731 25.5444 33.3692C25.9537 32.9652 26.1836 32.4174 26.1836 31.8462C26.1836 31.2749 25.9537 30.7271 25.5444 30.3232C25.1352 29.9192 24.5801 29.6923 24.0013 29.6923C23.4225 29.6923 22.8675 29.9192 22.4582 30.3232C22.0489 30.7271 21.819 31.2749 21.819 31.8462C21.819 32.4174 22.0489 32.9652 22.4582 33.3692C22.8675 33.7731 23.4225 34 24.0013 34Z" fill="black"/>
      </svg>
    ),
  },
  '2,6': {
    name: 'три отказа от оплаты',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        o o o
      </div>
    ),
  },
  '3,1': {
    name: 'купи',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        Buy
      </div>
    ),
  },
  '3,2': {
    name: '-30',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        -30
      </div>
    ),
  },
  '3,3': {
    name: '+30',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        +30
      </div>
    ),
  },
  '3,4': {
    name: 'продай',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        Sell
      </div>
    ),
  },
  '3,5': {
    name: 'на любую из креста',
    handler: () => (
      <svg
        width="90%"
        height="90%"
        viewBox="0 0 48 48"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        preserveAspectRatio="xMidYMid meet"
      >
        <path d="M24.7002 23.2998H34.3096L33.5049 22.4951L34.4951 21.5049L36 23.0098L37.5049 21.5049L38.4951 22.4951L37.6904 23.2998H42V24.7002H37.6904L38.4951 25.5049L37.5049 26.4951L36 24.9902L34.4951 26.4951L33.5049 25.5049L34.3096 24.7002H24.7002V36H23.2998V24.7002H6V23.2998H23.2998V12H24.7002V23.2998Z" fill="black"/>
        <path d="M33 21L39 27M39 21L33 27" stroke="black" strokeWidth="1.4"/>
      </svg>
    ),
  },
  '3,6': {
    name: 'на биржу',
    handler: () => (
      <svg
        width="90%"
        height="90%"
        viewBox="0 0 48 48"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        preserveAspectRatio="xMidYMid meet"
      >
        <path d="M6 24C6 19.2261 7.89642 14.6477 11.2721 11.2721C14.6477 7.89642 19.2261 6 24 6C28.7739 6 33.3523 7.89642 36.7279 11.2721C40.1036 14.6477 42 19.2261 42 24C42 28.7739 40.1036 33.3523 36.7279 36.7279C33.3523 40.1036 28.7739 42 24 42C19.2261 42 14.6477 40.1036 11.2721 36.7279C7.89642 33.3523 6 28.7739 6 24ZM24 9.08571C22.0414 9.08571 20.102 9.47148 18.2926 10.221C16.4831 10.9705 14.8389 12.0691 13.454 13.454C12.0691 14.8389 10.9705 16.4831 10.221 18.2926C9.47148 20.102 9.08571 22.0414 9.08571 24C9.08571 25.9586 9.47148 27.898 10.221 29.7075C10.9705 31.5169 12.0691 33.1611 13.454 34.546C14.8389 35.9309 16.4831 37.0295 18.2926 37.779C20.102 38.5285 22.0414 38.9143 24 38.9143C27.9555 38.9143 31.749 37.343 34.546 34.546C37.343 31.749 38.9143 27.9555 38.9143 24C38.9143 20.0445 37.343 16.251 34.546 13.454C31.749 10.657 27.9555 9.08571 24 9.08571Z" fill="black"/>
        <path d="M28 20.5H30C30 17.663 27.245 16.369 25 16.071V14H23V16.071C20.755 16.369 18 17.663 18 20.5C18 23.206 20.666 24.613 23 24.93V29.9C21.552 29.649 20 28.876 20 27.5H18C18 30.089 20.425 31.619 23 31.936V34H25V31.93C27.245 31.632 30 30.337 30 27.5C30 24.663 27.245 23.369 25 23.071V18.1C26.33 18.339 28 19.041 28 20.5ZM20 20.5C20 19.041 21.67 18.339 23 18.1V22.899C21.629 22.646 20 21.897 20 20.5ZM28 27.5C28 28.959 26.33 29.661 25 29.9V25.1C26.33 25.339 28 26.041 28 27.5Z" fill="black"/>
      </svg>
    ),
  },
  '4,1': {
    name: 'поставь мезон',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        Put<br />*
      </div>
    ),
  },
  '4,2': {
    name: 'убери мезон',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        Rem<br />*
      </div>
    ),
  },
  '4,3': {
    name: '-50',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        -50
      </div>
    ),
  },
  '4,4': {
    name: '+50',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        +50
      </div>
    ),
  },
  '4,5': {
    name: 'на любую из перефирии',
    handler: () => (
      <svg
        width="90%"
        height="90%"
        viewBox="0 0 48 48"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        preserveAspectRatio="xMidYMid meet"
      >
        <path d="M42 12H6V36H42V12Z" stroke="black" strokeWidth="1.4"/>
        <path d="M30 9L36 15M36 9L30 15" stroke="black" strokeWidth="1.4"/>
      </svg>
    ),
  },
  '4,6': {
    name: 'в тюрьму',
    handler: () => (
      <svg
        width="90%"
        height="90%"
        viewBox="0 0 48 48"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        preserveAspectRatio="xMidYMid meet"
      >
        <path d="M16.5 10V39M31 10V39M8 19H39M8 32H39M20 16.5L13.5 22M34.5 16.5L28.5 22M20 29L13.5 34.5M34.5 29L28.5 34.5" stroke="black" strokeWidth="2"/>
      </svg>
    ),
  },
  '5,1': {
    name: 'плюс старт',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        +st
      </div>
    ),
  },
  '5,2': {
    name: 'минус старт',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        -st
      </div>
    ),
  },
  '5,3': {
    name: 'продай монополию',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        Sell<br />mon
      </div>
    ),
  },
  '5,4': {
    name: 'всем по 10',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        All<br />-10
      </div>
    ),
  },
  '5,5': {
    name: 'от всех по 10',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        All<br />+10
      </div>
    ),
  },
  '5,6': {
    name: 'все теряют',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        All<br />lose
      </div>
    ),
  },
  '6,1': {
    name: 'свернуть к старту',
    handler: () => (
      <svg
        width="90%"
        height="90%"
        viewBox="0 0 48 48"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        preserveAspectRatio="xMidYMid meet"
      >
        <path d="M8.5 15.5H33V22M33 22L31.5 19M33 22L34.5 19" stroke="black"/>
        <path d="M33.6307 27.767L32.8778 27.9801C32.8305 27.8546 32.7607 27.7327 32.6683 27.6143C32.5784 27.4936 32.4553 27.3942 32.299 27.3161C32.1428 27.2379 31.9427 27.1989 31.6989 27.1989C31.3651 27.1989 31.0869 27.2758 30.8643 27.4297C30.6442 27.5812 30.5341 27.7741 30.5341 28.0085C30.5341 28.2169 30.6098 28.3814 30.7614 28.5021C30.9129 28.6229 31.1496 28.7235 31.4716 28.804L32.2812 29.0028C32.7689 29.1212 33.1323 29.3023 33.3714 29.5462C33.6106 29.7876 33.7301 30.099 33.7301 30.4801C33.7301 30.7926 33.6402 31.072 33.4602 31.3182C33.2827 31.5644 33.0341 31.7585 32.7145 31.9006C32.3949 32.0426 32.0232 32.1136 31.5994 32.1136C31.0431 32.1136 30.5826 31.9929 30.218 31.7514C29.8535 31.5099 29.6226 31.1572 29.5256 30.6932L30.321 30.4943C30.3968 30.7879 30.54 31.008 30.7507 31.1548C30.9638 31.3016 31.242 31.375 31.5852 31.375C31.9759 31.375 32.286 31.2921 32.5156 31.1264C32.7476 30.9583 32.8636 30.7571 32.8636 30.5227C32.8636 30.3333 32.7973 30.1747 32.6648 30.0469C32.5322 29.9167 32.3286 29.8196 32.054 29.7557L31.1449 29.5426C30.6454 29.4242 30.2784 29.2408 30.044 28.9922C29.812 28.7412 29.696 28.4276 29.696 28.0511C29.696 27.7434 29.7824 27.4711 29.9553 27.2344C30.1304 26.9976 30.3684 26.8118 30.669 26.6768C30.9721 26.5419 31.3153 26.4744 31.6989 26.4744C32.2386 26.4744 32.6624 26.5928 32.9702 26.8295C33.2803 27.0663 33.5005 27.3788 33.6307 27.767ZM37.3638 26.5455V27.2557H34.5371V26.5455H37.3638ZM35.361 25.2386H36.199V30.4375C36.199 30.6742 36.2334 30.8518 36.302 30.9702C36.373 31.0862 36.463 31.1643 36.5719 31.2045C36.6832 31.2424 36.8004 31.2614 36.9235 31.2614C37.0158 31.2614 37.0916 31.2566 37.1507 31.2472C37.2099 31.2353 37.2573 31.2259 37.2928 31.2188L37.4632 31.9716C37.4064 31.9929 37.3271 32.0142 37.2253 32.0355C37.1235 32.0592 36.9945 32.071 36.8382 32.071C36.6015 32.071 36.3695 32.0201 36.1422 31.9183C35.9173 31.8165 35.7303 31.6615 35.5811 31.4531C35.4344 31.2448 35.361 30.982 35.361 30.6648V25.2386Z" fill="black"/>
      </svg>
    ),
  },
  '6,2': {
    name: 'секвестр',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        Seq
      </div>
    ),
  },
  '6,3': {
    name: 'в такси',
    handler: () => (
      <svg
        width="90%"
        height="90%"
        viewBox="0 0 48 48"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        preserveAspectRatio="xMidYMid meet"
      >
        <path d="M13 24H6V17H13V24H20V17H27V24H34V17H41V24H34V31H27V24H20V31H13V24Z" fill="black"/>
        <path d="M6 24H41V17H34V31H27V17H20V31H13V17H6V24Z" stroke="black"/>
      </svg>
    ),
  },
  '6,4': {
    name: 'между фишкой и стартом',
    handler: () => (
      <svg
        width="90%"
        height="90%"
        viewBox="0 0 48 48"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        preserveAspectRatio="xMidYMid meet"
      >
        <path d="M32.6307 32.767L31.8778 32.9801C31.8305 32.8546 31.7607 32.7327 31.6683 32.6143C31.5784 32.4936 31.4553 32.3942 31.299 32.3161C31.1428 32.2379 30.9427 32.1989 30.6989 32.1989C30.3651 32.1989 30.0869 32.2758 29.8643 32.4297C29.6442 32.5812 29.5341 32.7741 29.5341 33.0085C29.5341 33.2169 29.6098 33.3814 29.7614 33.5021C29.9129 33.6229 30.1496 33.7235 30.4716 33.804L31.2812 34.0028C31.7689 34.1212 32.1323 34.3023 32.3714 34.5462C32.6106 34.7876 32.7301 35.099 32.7301 35.4801C32.7301 35.7926 32.6402 36.072 32.4602 36.3182C32.2827 36.5644 32.0341 36.7585 31.7145 36.9006C31.3949 37.0426 31.0232 37.1136 30.5994 37.1136C30.0431 37.1136 29.5826 36.9929 29.218 36.7514C28.8535 36.5099 28.6226 36.1572 28.5256 35.6932L29.321 35.4943C29.3968 35.7879 29.54 36.008 29.7507 36.1548C29.9638 36.3016 30.242 36.375 30.5852 36.375C30.9759 36.375 31.286 36.2921 31.5156 36.1264C31.7476 35.9583 31.8636 35.7571 31.8636 35.5227C31.8636 35.3333 31.7973 35.1747 31.6648 35.0469C31.5322 34.9167 31.3286 34.8196 31.054 34.7557L30.1449 34.5426C29.6454 34.4242 29.2784 34.2408 29.044 33.9922C28.812 33.7412 28.696 33.4276 28.696 33.0511C28.696 32.7434 28.7824 32.4711 28.9553 32.2344C29.1304 31.9976 29.3684 31.8118 29.669 31.6768C29.9721 31.5419 30.3153 31.4744 30.6989 31.4744C31.2386 31.4744 31.6624 31.5928 31.9702 31.8295C32.2803 32.0663 32.5005 32.3788 32.6307 32.767ZM36.3638 31.5455V32.2557H33.5371V31.5455H36.3638ZM34.361 30.2386H35.199V35.4375C35.199 35.6742 35.2334 35.8518 35.302 35.9702C35.373 36.0862 35.463 36.1643 35.5719 36.2045C35.6832 36.2424 35.8004 36.2614 35.9235 36.2614C36.0158 36.2614 36.0916 36.2566 36.1507 36.2472C36.2099 36.2353 36.2573 36.2259 36.2928 36.2188L36.4632 36.9716C36.4064 36.9929 36.3271 37.0142 36.2253 37.0355C36.1235 37.0592 35.9945 37.071 35.8382 37.071C35.6015 37.071 35.3695 37.0201 35.1422 36.9183C34.9173 36.8165 34.7303 36.6615 34.5811 36.4531C34.4344 36.2448 34.361 35.982 34.361 35.6648V30.2386Z" fill="black"/>
        <path d="M35 16L29 22M29 16L35 22" stroke="black" strokeWidth="1.4"/>
        <path d="M6 12H32V28.5" stroke="black" strokeWidth="1.4"/>
      </svg>
    ),
  },
  '6,5': {
    name: 'всем по 15',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        All<br />-15
      </div>
    ),
  },
  '6,6': {
    name: 'от всех по 15',
    handler: () => (
      <div className="text-[1.5vw] leading-none text-center">
        All<br />+15
      </div>
    ),
  },
};

function getChanceIcon(row: number, col: number): ReactElement {
  const handlerKey = `${row},${col}`;
  return handlers[handlerKey]?.handler();
}

function getChanceTip(row: number, col: number): string {
  const handlerKey = `${row},${col}`;
  return handlers[handlerKey]?.name;
}

type Props = {
  resultRow?: number; // 1–6
  resultCol?: number; // 1–6
  onClose: () => void;
};

export const ChanceMatrixPanel: React.FC<Props> = ({ resultRow, resultCol, onClose }) => {
  const panelRef = useRef<HTMLDivElement>(null);
  const parentRef = useRef<HTMLElement | null>(null);

  const positionRef = useRef({ x: 0, y: 0 });
  const offsetRef = useRef({ x: 0, y: 0 });
  const [_, forceUpdate] = useState(0);
  const [dragging, setDragging] = useState(false);

  const OFFSET_X = 200;
  const OFFSET_Y = 100;

  // Определение границ родителя
  useEffect(() => {
    let node = panelRef.current?.parentElement;
    while (node && !node.classList.contains('game-board')) {
      node = node.parentElement;
    }
    parentRef.current = node ?? null;
  }, []);

  const onMouseDown = (e: React.MouseEvent) => {
    e.preventDefault();
    offsetRef.current = {
      x: e.clientX - positionRef.current.x,
      y: e.clientY - positionRef.current.y,
    };
    setDragging(true);
  };

  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      if (!dragging || !panelRef.current || !parentRef.current) return;

      const parentRect = parentRef.current.getBoundingClientRect();
      const panelRect = panelRef.current.getBoundingClientRect();

      let newX = e.clientX - offsetRef.current.x;
      let newY = e.clientY - offsetRef.current.y;

      // ограничиваем, учитывая оффсет (в координатах без transform)
      newX = Math.max(-OFFSET_X, Math.min(newX, parentRect.width - panelRect.width - OFFSET_X));
      newY = Math.max(-OFFSET_Y, Math.min(newY, parentRect.height - panelRect.height - OFFSET_Y));

      positionRef.current = { x: newX, y: newY };
      forceUpdate((v) => v + 1);
    };

    const handleMouseUp = () => setDragging(false);

    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, [dragging]);

  useEffect(() => {
    if (resultRow && resultCol) {
      const timeout = setTimeout(() => {
        onClose();
      }, 1300);

      return () => clearTimeout(timeout);
    }
  }, [resultRow, resultCol]);

  return (
    <div
      ref={panelRef}
      className="absolute z-60 rounded bg-white shadow-lg p-4 select-none cursor-move border"
      style={{
        position: 'absolute',
        left: positionRef.current.x + OFFSET_X,
        top: positionRef.current.y + OFFSET_Y,
        width: 540,
        height: 540,
      }}
      onMouseDown={onMouseDown}
    >
      {/* Сетка шанса */}
      <div
        className="grid gap-1 w-full h-full"
        style={{
          gridTemplateRows: '0.5fr repeat(6, 1fr)',
          gridTemplateColumns: '0.5fr repeat(6, 1fr)',
        }}
      >
        {[...Array(7 * 7)].map((_, idx) => {
          const row = Math.floor(idx / 7);
          const col = idx % 7;

          if (row === 0 && col === 0) return <div key={idx} />;
          if (row === 0) {
            return (
              <div
                key={idx}
                className="text-center font-bold flex items-center justify-center border"
              >
                {col}
              </div>
            );
          }
          if (col === 0) {
            return (
              <div
                key={idx}
                className="text-center font-bold flex items-center justify-center border"
              >
                {row}
              </div>
            );
          }

          const isRowHighlighted = resultRow === row;
          const isColHighlighted = resultCol === col;
          const isIntersection = isRowHighlighted && isColHighlighted;

          const bgClass = isIntersection
            ? 'bg-green-400'
            : isRowHighlighted || isColHighlighted
              ? 'bg-gray-300'
              : 'bg-white';

          return (
            <div
              key={idx}
              title={getChanceTip(row, col)}
              className={`w-full h-full flex items-center justify-center border text-sm ${bgClass} transition-colors duration-500`}
            >
              {getChanceIcon(row, col)}
            </div>
          );
        })}
      </div>
    </div>
  );
};
